import Foundation


class Person{
   var name: String = "蓝忘机" //初始化方法1
   var age: Int
   //init(){
       age = 18 //初始化方法1
   }
   //重载一个初始化方法
   init(myAge: Int){
       age = myAge
   }
   //析构方法
   deinit {
       print("\(name) is being deinitialized")
   }
}

//类的拷贝为浅拷贝
var pc = Person()
var cp = pc
cp.age = 18
print(pc.age)

//变量的拷贝为深拷贝
var a = 3
var b = a
a = 4
print(b)

//
值类型（Value Types）
在 Swift 中，结构体（Structs）和枚举（Enums）是值类型。当你将一个值类型的实例赋给一个变量、常量，或
者传递给一个函数时，实际上操作的是该实例的一个拷贝。这种拷贝是深拷贝，因为它完全复制了一个独立的实例。

例如，当你拷贝一个结构体，你会得到两个完全独立的实例，它们在内存中占据不同的位置。对一个实例的修改不会
影响到另一个。

引用类型（Reference Types）
在 Swift 中，类（Classes）是引用类型。当你将一个引用类型的实例赋给一个变量、常量，或者传递给一个函数
时，实际上传递的是对同一个实例的引用。这种拷贝是浅拷贝，因为它只复制了对实例的引用，而不是实例本身。

*当你拷贝一个类的实例，你实际上只是拷贝了一个指向同一个实例的新引用。因此，两个变量或常量实际上指向同一
个实例，对这个实例的任何修改都会反映在这两个引用上。

深拷贝（Deep Copy）
深拷贝意味着实际上创建了一个对象的完整副本。在 Swift 中，对于值类型（如结构体和枚举），这是自动发生的。
但对于引用类型（如类），如果你需要一个完全独立的副本，你必须手动实现。这通常涉及到创建一个新的实例，并
逐个复制旧实例的每个属性到新实例。

浅拷贝（Shallow Copy）
浅拷贝仅仅复制了对对象的引用，而不是对象本身。在 Swift 的引用类型中，这是默认行为。因此，多个引用可能指
向同一个实例，使得一个引用上的改变可以反映到其他所有引用上。

总结
值类型（如结构体和枚举）在 Swift 中默认进行深拷贝。
引用类型（如类）在 Swift 中默认进行浅拷贝。
如果需要对引用类型进行深拷贝，必须手动实现。
了解这些概念对于管理内存和避免在 Swift 程序中出现意外的副作用非常重要。

